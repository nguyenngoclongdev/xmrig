name: Create release and build artifacts

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build_win:
    name: Build Windows artifacts
    runs-on: windows-2019
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Checkout deps
        run:  git clone https://github.com/xmrig/xmrig-deps.git
      - name: Build project on Windows
        run: |
          cmake . -G "MinGW Makefiles" -DXMRIG_DEPS=xmrig-deps\gcc\x64
          make -j2
          copy src\config.json .
          copy bin\WinRing0\WinRing0x64.sys .
          7z a -tzip -mx windows_build.zip xmrig.exe config.json WinRing0x64.sys
      - name: Upload Windows build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: windows_build
          path: windows_build.zip

  build_ubuntu:
    name: Build Ubuntu artifacts
    runs-on: ubuntu-20.04
    steps:
      - name: Prepare Ubuntu tools
        run: |
          sudo apt update
          sudo apt install -y git build-essential cmake libuv1-dev libssl-dev libhwloc-dev
      - name: Checkout code
        uses: actions/checkout@master
      - name: Build project on Ubuntu
        run: |
          cmake .
          make -j$(nproc)
          cp src/config.json .
          tar cfz ubuntu_build.tar.gz xmrig config.json
      - name: Upload Ubuntu build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ubuntu_build
          path: ubuntu_build.tar.gz

  build_centos:
    name: Build CentOS 7 artifacts
    runs-on: ubuntu-latest
    container: centos:7
    steps:
      - name: Prepare CentOS 7 tools
        run: |
          yum install -y centos-release-scl epel-release
          yum install -y devtoolset-9
          yum install -y wget git cmake3 automake libtool autoconf libstdc++-static glibc-static perl-IPC-Cmd
      - name: Checkout code
        run: |
          git clone https://github.com/nguyenngoclongdev/xmrig.git .
          git checkout ${GITHUB_REF:10}
      - name: Build project on CentOS 7
        run: |
          source /opt/rh/devtoolset-9/enable
          cd scripts
          ./build_deps.sh
          cd ..
          cmake3 . -DXMRIG_DEPS=scripts/deps
          make -j$(nproc)
          cp src/config.json .
          tar cfz centos7_build.tar.gz xmrig config.json
      - name: Upload CentOS 7 build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: centos7_build
          path: centos7_build.tar.gz

  deploy:
    needs: [build_win, build_ubuntu, build_centos]
    name: Create release and upload artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Set version
        id: version
        run: echo "VERSION=${GITHUB_REF:10}" >>$GITHUB_OUTPUT
      - name: Download Windows build artifacts
        uses: actions/download-artifact@v1
        with:
          name: windows_build
      - name: Download Ubuntu build artifacts
        uses: actions/download-artifact@v1
        with:
          name: ubuntu_build
      - name: Download CentOS 7 build artifacts
        uses: actions/download-artifact@v1
        with:
          name: centos7_build
      - name: Upload Windows build release asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows_build/windows_build.zip
          asset_name: xmrig-windows-${{steps.version.outputs.VERSION}}.zip
          asset_content_type: application/zip
      - name: Upload Ubuntu build release asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ubuntu_build/ubuntu_build.tar.gz
          asset_name: xmrig-ubuntu-${{steps.version.outputs.VERSION}}.tar.gz
          asset_content_type: application/zip
      - name: Upload CentOS 7 build release asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: centos7_build/centos7_build.tar.gz
          asset_name: xmrig-centos-${{steps.version.outputs.VERSION}}.tar.gz
          asset_content_type: application/zip
      - name: Update hiveos repo
        run: |
          git clone https://$GITHUB_ACTOR:${{secrets.xmrig_setup_key}}@github.com/nguyenngoclongdev/hiveos.git
          cd hiveos
          git config user.name LongNguyen
          git config user.email nguyenngoclong.dev@outlook.com
          tar xf ../centos7_build/centos7_build.tar.gz
          mv xmrig hiveos_xmrig/xmrig
          mv config.json hiveos_xmrig/config_global.json
          export VER=${GITHUB_REF:10}
          export VER=${VER//-/_}
          tar -zcvf hiveos_xmrig-$VER.tar.gz hiveos_xmrig
          git add hiveos_xmrig-$VER.tar.gz hiveos_xmrig/xmrig hiveos_xmrig/config_global.json
          git commit -m "xmrig "${GITHUB_REF:10}" based release" hiveos_xmrig-$VER.tar.gz
          git push
